/*
Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.

Follow up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?
*/

//approach 1:
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        
        int n = nums.size();
        int sum = n*(n+1)/2;
        int arrSum =0, ans;
        
        for(int i=0;i<n;i++)
        {
            arrSum += nums[i]; 
        }
        
        ans = sum - arrSum;
        return ans;
        
    }
};
//approach  is having memory issue for larger inputs so next approach

class Solution {
public:
    int missingNumber(vector<int>& nums) {
        
        int n = nums.size();
        
       
        for(int i=0;i<nums.size();i++)
        {
             n ^= nums[i]^i;
        }
        return n;
     }
};
