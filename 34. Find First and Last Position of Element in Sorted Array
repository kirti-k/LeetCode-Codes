Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

//method 1:
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        
        vector<int> ans;
        int en = nums.size();
        int f=-1,l=-1;
        if(nums.size()<1)
        {
            ans.push_back(f);
        ans.push_back(l);
        return ans;
        }
        
        for(int i=0;i<en;i++)
        {
            if(nums[i]==target)
            {
                
              f = i;
                break;
            }
            
        }
        for(int i=en-1;i>=0;i--)
        {
            if(nums[i]==target)
            {
                l = i;
                break;
            }
        }
        
        ans.push_back(f);
        ans.push_back(l);
        return ans;
    }
};


method 2:

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        
        vector<int> ans;
        int st = 0, en = nums.size()-1;
        int f=-1,l=-1;
        if(nums.size()<1)
        {
            ans.push_back(f);
        ans.push_back(l);
        return ans;
        }
        while(st<=en)
        {
            int mid = (st+en)/2;
            if(nums[mid] == target)
            {
                f=mid;
                en = mid-1;
            }
            else if(nums[mid]>target)
            {
                en = mid-1;
                
            }
            else{
                st = mid+1;
            }
        }
         ans.push_back(f);
        st = 0, en = nums.size()-1;
        while(st<=en)
        {
            int mid = (st+en)/2;
            if(nums[mid]==target)
            {
                l = mid;
                st = mid+1;
            }
            else if(nums[mid]>target)
            {
                en = mid-1;
                 
            }
             else{
                st = mid+1;
            }
        }      
        ans.push_back(l);
        
        return ans;
    }
};
